###############################################################################
# Main CMake file to build MODFLOW-NWT distribution
###############################################################################
cmake_minimum_required(VERSION 3.9)

project(MODFLOW-NWT
  VERSION 1.2.0
  LANGUAGES Fortran
)


###############################################################################
# Specify several compiler-specific options
# (Note that similar can be accomplished with toolset files)
###############################################################################

# Modify compile flags to change optimization level from O3 to O2
string(REGEX REPLACE "([\\/\\-]O)3" "\\12"
  CMAKE_Fortran_FLAGS "${CMAKE_Fortran_FLAGS}")
string(REGEX REPLACE "([\\/\\-]O)3" "\\12"
  CMAKE_Fortran_FLAGS_RELEASE "${CMAKE_Fortran_FLAGS_RELEASE}")
string(REGEX REPLACE "([\\/\\-]O)3" "\\12"
  CMAKE_Fortran_FLAGS_MINSIZEREL "${CMAKE_Fortran_FLAGS_MINSIZEREL}")
string(REGEX REPLACE "([\\/\\-]O)3" "\\12"
  CMAKE_Fortran_FLAGS_RELWITHDEBINFO "${CMAKE_Fortran_FLAGS_RELWITHDEBINFO}")

# Common compiler build flags
if("${CMAKE_BUILD_TYPE}" STREQUAL "Debug")
  if("${CMAKE_Fortran_COMPILER_ID}" STREQUAL "GNU")
    set(Fortran_BUILD_FLAGS
      -fcheck=all
      -fbacktrace
      -fbounds-check
      -ffpe-trap=overflow,zero,invalid,denormal
    )
  elseif("${CMAKE_Fortran_COMPILER_ID}" STREQUAL "Intel")
    if(MSVC)  # Windows
      set(Fortran_BUILD_FLAGS
        /traceback
        /check:all
        /debug:all
        /fpe:0
      )
    else()
      set(Fortran_BUILD_FLAGS
        -traceback
        -check all
        -debug all
        -fpe0
      )
    endif()
  endif()
else()  # Release, MinSizeRel, RelWithDebInfo, etc.
  if("${CMAKE_Fortran_COMPILER_ID}" STREQUAL "GNU")
    set(Fortran_BUILD_FLAGS
      -ffpe-summary=overflow
      -ffpe-trap=overflow,zero,invalid
    )
  elseif("${CMAKE_Fortran_COMPILER_ID}" STREQUAL "Intel")
    if(MSVC)  # Windows
      set(Fortran_BUILD_FLAGS /fpe:3)
    else()
      set(Fortran_BUILD_FLAGS -fpe3)
    endif()
  endif()
endif()

# Common compiler warning flags
include(CheckFortranCompilerFlag)
if("${CMAKE_Fortran_COMPILER_ID}" STREQUAL "GNU")
  # flags available since version 5
  set(Fortran_WARN_FLAGS
    -Wall
    -Wextra
    -Wno-tabs
    -Wno-compare-reals
    -Wno-conversion
    -Wno-unused-dummy-argument
    -Wno-unused-variable
    -Wno-unused-label
    -Wno-unused-parameter
    -Wno-maybe-uninitialized
  )
  if(${CMAKE_Fortran_COMPILER_VERSION} VERSION_GREATER "8.0.0")
    list(APPEND Fortran_WARN_FLAGS -Wno-do-subscript)
  endif()
elseif("${CMAKE_Fortran_COMPILER_ID}" STREQUAL "Intel")
  if(MSVC)  # Windows
    set(Fortran_WARN_FLAGS /warn:all)
  else()  # Linux / macOS
    #6717: This name has not been given an explicit type
    #7712: This variable has not been used
    set(Fortran_WARN_FLAGS
      -warn all
      -diag-disable 5194,6717,7712,8889
    )
  endif()
else()  # Guess for other Fortran compilers
  check_fortran_compiler_flag(-Wall HAS_WALL)
  if(${HAS_WALL})
    set(Fortran_WARN_FLAGS -Wall)
  endif()
endif()


# Test if Fortran 2003 Standard stream I/O is supported
include(CheckFortranSourceCompiles)
check_fortran_source_compiles("
      PROGRAM test
        OPEN(UNIT=9,FORM='UNFORMATTED',ACCESS='STREAM')
      END PROGRAM
" FORTRAN_2003_STANDARD_IO)

if(${FORTRAN_2003_STANDARD_IO})
  set(FORTRAN_FORM_BINARY FALSE)
else()
  # Test if non-standard BINARY extension is supported
  include(CheckFortranSourceCompiles)
  check_fortran_source_compiles("
      PROGRAM test
        OPEN(UNIT=9,FORM='BINARY')
      END PROGRAM
  " FORTRAN_FORM_BINARY)
endif()

# Generate one of three files
if(${FORTRAN_2003_STANDARD_IO})
  set(OPENSPEC "\
C     Generated by CMake for Standard Fortran 2003
      CHARACTER*20 ACCESS,FORM,ACTION(2)
      DATA ACCESS/'STREAM'/
      DATA FORM/'UNFORMATTED'/
      DATA (ACTION(I),I=1,2)/'READ','READWRITE'/
")
elseif(${FORTRAN_FORM_BINARY})
  set(OPENSPEC "\
C     Generated by CMake for non-standard Fortran with BINARY extension
      CHARACTER*20 ACCESS,FORM,ACTION(2)
      DATA ACCESS/'SEQUENTIAL'/
      DATA FORM/'BINARY'/
      DATA (ACTION(I),I=1,2)/'READ','READWRITE'/
")
else()  # pre-2003 Fortran Standard
  set(OPENSPEC "\
C     Generated by CMake for pre-2003 Fortran Standard
      CHARACTER*20 ACCESS,FORM,ACTION(2)
      DATA ACCESS/'SEQUENTIAL'/
      DATA FORM/'UNFORMATTED'/
      DATA (ACTION(I),I=1,2)/'READ','READWRITE'/
")
endif()

macro(write_openspec_inc OPENSPEC_INC TARGET)
  message(STATUS "Writing configured ${OPENSPEC_INC} for ${TARGET}")
  file(WRITE ${CMAKE_CURRENT_BINARY_DIR}/${OPENSPEC_INC} ${OPENSPEC})
  target_include_directories(${TARGET} PRIVATE ${CMAKE_CURRENT_BINARY_DIR})
  # also (potentially) overwrite file in directory that contains the source files
  # TODO: is there any workaround to not modify source tree?
  file(WRITE ${OPENSPEC_INC} ${OPENSPEC})
endmacro()


# Build executable targets
add_subdirectory(src mfnwt)

message(STATUS "-- Configure summary --")
message(STATUS "Compiler ID:            ${CMAKE_Fortran_COMPILER_ID}")
message(STATUS "Build Type:             ${CMAKE_BUILD_TYPE}")
message(STATUS "CMAKE_Fortran_COMPILER: ${CMAKE_Fortran_COMPILER}")
message(STATUS "CMAKE_Fortran_FLAGS:    ${CMAKE_Fortran_FLAGS}")
if("${CMAKE_BUILD_TYPE}" STREQUAL "Debug")
  message(STATUS "CMAKE_Fortran_FLAGS_DEBUG: ${CMAKE_Fortran_FLAGS_DEBUG}")
elseif("${CMAKE_BUILD_TYPE}" STREQUAL "Release")
  message(STATUS "CMAKE_Fortran_FLAGS_RELEASE: ${CMAKE_Fortran_FLAGS_RELEASE}")
elseif("${CMAKE_BUILD_TYPE}" STREQUAL "MinSizeRel")
  message(STATUS "CMAKE_Fortran_FLAGS_MINSIZEREL: ${CMAKE_Fortran_FLAGS_MINSIZEREL}")
elseif("${CMAKE_BUILD_TYPE}" STREQUAL "RelWithDebInfo")
  message(STATUS "CMAKE_Fortran_FLAGS_RELWITHDEBINFO: ${CMAKE_Fortran_FLAGS_RELWITHDEBINFO}")
endif()
message(STATUS "Fortran_BUILD_FLAGS: ${Fortran_BUILD_FLAGS}")
message(STATUS "Fortran_WARN_FLAGS: ${Fortran_WARN_FLAGS}")

